apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: flux-operator-composite
spec:
  compositeTypeRef:
    apiVersion: workload.dcp.sap/v1alpha1
    kind: XFluxOperator
  resources:
    
    - name: helm-release-flux-operator
      base:
        apiVersion: helm.crossplane.io/v1beta1
        kind: Release
        metadata:
          name: flux-operator
          annotations:
            crossplane.io/external-name: flux-operator
          labels:
            cluster-name: ""
        spec:
          forProvider:
            chart:
              name: flux-operator
              repository: oci://ghcr.io/controlplaneio-fluxcd/charts
              # version: 2.13.0
            namespace: flux-system
          providerConfigRef:
            name: controlcluster-provider
      patches:
      - type: CombineFromComposite
        combine:
          variables:
            - fromFieldPath: "spec.name"
          strategy: string
          string:
            fmt: "%s-provider-config"
        toFieldPath: "spec.providerConfigRef.name"
      # Grab cluster label
      - type: FromCompositeFieldPath
        fromFieldPath: "spec.name"
        toFieldPath: "metadata.labels['cluster-name']"

    # - name: helm-release-flux-instance
    #   base:
    #     apiVersion: helm.crossplane.io/v1beta1
    #     kind: Release
    #     metadata:
    #       name: flux-system
    #       annotations:
    #         crossplane.io/external-name: flux-system
    #       labels:
    #         cluster-name: ""
    #     spec:
    #       forProvider:
    #         chart:
    #           name: flux-instance
    #           repository: oci://ghcr.io/controlplaneio-fluxcd/charts
    #           # version: 1.9.0
    #         namespace: flux-system
    #       providerConfigRef:
    #         name: controlcluster-provider
    #   patches:
    #   - type: CombineFromComposite
    #     combine:
    #       variables:
    #         - fromFieldPath: "spec.name"
    #       strategy: string
    #       string:
    #         fmt: "%s-provider-config"
    #     toFieldPath: "spec.providerConfigRef.name"      
    #   # Grab cluster label
    #   - type: FromCompositeFieldPath
    #     fromFieldPath: "spec.name"
    #     toFieldPath: "metadata.labels['cluster-name']"
 
    # FluxInstance CR
    - name: flux-instance-cr
      base:
        apiVersion: kubernetes.crossplane.io/v1alpha2
        kind: Object
        metadata:
          name: flux-system
          labels:
            cluster-name: ""
        spec:
          forProvider:
            manifest:
              apiVersion: fluxcd.controlplane.io/v1
              kind: FluxInstance
              metadata:
                name: flux
                namespace: flux-system
                annotations:
                  fluxcd.controlplane.io/reconcileEvery: "1h"
                  fluxcd.controlplane.io/reconcileTimeout: "5m"
              spec:
                distribution:
                  version: "2.5.x"
                  registry: "ghcr.io/fluxcd"
                  artifact: "oci://ghcr.io/controlplaneio-fluxcd/flux-operator-manifests"
                components:
                  - source-controller
                  - kustomize-controller
                  - helm-controller
                  - notification-controller
                  - image-reflector-controller
                  - image-automation-controller
                cluster:
                  type: azure
                sync:
                  kind: GitRepository
                  url: "https://github.com/my-org/my-fleet.git"
                  ref: "refs/heads/main"
                  path: "clusters/my-cluster"
                  pullSecret: "flux-system"
                  provider: github
                storage:
                  class: "default"
                  size: "1Gi"
                # kustomize:
                #   patches:
                #     # target image-reflector-controller deployment
                #     # enable Azure Workload Identity support
                #     - patch: |
                #         - op: add
                #           path: /metadata/labels/azure.workload.identity~1use
                #           value: "true"
                #       target:
                #         kind: Deployment
                #         name: image-reflector-controller
                #     - patch: |
                #         - op: add
                #           path: /spec/template/metadata/labels/azure.workload.identity~1use
                #           value: "true"
                #       target:
                #         kind: Deployment
                #         name: image-reflector-controller                        
                #     # target image-reflector-controller service account
                #     # SAPIT-DCP-GitOps-Flux-Image-Reflector identity as a test one
                #     - patch: |
                #         - op: add
                #           path: /metadata/annotations/azure.workload.identity~1client-id
                #           value: "a91357ee-508a-4b06-ad0d-2e2f631798ad" 
                #       target:
                #         kind: ServiceAccount
                #         name: "image-reflector-controller"
          providerConfigRef:
            name: controlcluster-provider
      patches:
      - type: CombineFromComposite
        combine:
          variables:
            - fromFieldPath: "spec.name"
          strategy: string
          string:
            fmt: "%s-provider-config"
        toFieldPath: "spec.providerConfigRef.name"
      # grab path
      - type: CombineFromComposite
        combine:
          variables:
            - fromFieldPath: "spec.name"
          strategy: string
          string:
            fmt: "clusters/%s"
        toFieldPath: "spec.forProvider.manifest.spec.sync.path"   
      # Grab url
      - type: FromCompositeFieldPath
        fromFieldPath: "spec.flux.url"
        toFieldPath: "spec.forProvider.manifest.spec.sync.url"
      # Grab version
      - type: FromCompositeFieldPath
        fromFieldPath: "spec.flux.version"
        toFieldPath: "spec.forProvider.manifest.spec.distribution.version"          
      # Grab branch
      - type: CombineFromComposite
        combine:
          variables:
            - fromFieldPath: "spec.flux.branch"
          strategy: string
          string:
            fmt: "refs/heads/%s"
        toFieldPath: "spec.forProvider.manifest.spec.sync.ref"
      # Grab cluster label
      - type: FromCompositeFieldPath
        fromFieldPath: "spec.name"
        toFieldPath: "metadata.labels['cluster-name']"

    # flux secret for git repo auth
    - name: flux-secret
      base:
        apiVersion: kubernetes.crossplane.io/v1alpha2
        kind: Object
        metadata:
          name: flux-system
          labels:
            cluster-name: ""
        spec:
          references:
            # - patchesFrom:
            #     apiVersion: v1
            #     fieldPath: data.githubAppBaseURL
            #     kind: Secret
            #     name: flux-system
            #     namespace: flux-system
            #   # toFieldPath: ""
            - patchesFrom:
                apiVersion: v1
                fieldPath: data.githubAppID
                kind: Secret
                name: flux-system
                namespace: flux-system
              # toFieldPath: ""
            - patchesFrom:
                apiVersion: v1
                fieldPath: data.githubAppInstallationID
                kind: Secret
                name: flux-system
                namespace: flux-system
              # toFieldPath: ""
            - patchesFrom:
                apiVersion: v1
                fieldPath: data.githubAppPrivateKey
                kind: Secret
                name: flux-system
                namespace: flux-system
              # toFieldPath: ""                            
          forProvider:
            manifest:        
              apiVersion: v1
              kind: Secret
              metadata:
                name: flux-system
                namespace: flux-system
                labels:
                  created-by: "crossplane"
                  host-composition: "flux-operator-composition"
                  crossplane.io/claim-namespace: ""
                  crossplane.io/claim-name: ""
                  crossplane.io/composite: ""                           
              # type: Opaque
          providerConfigRef:
            name: controlcluster-provider
      patches:
      - type: CombineFromComposite
        combine:
          variables:
            - fromFieldPath: "spec.name"
          strategy: string
          string:
            fmt: "%s-provider-config"
        toFieldPath: "spec.providerConfigRef.name"
      # # Grab secretRef.name
      # - type: FromCompositeFieldPath
      #   fromFieldPath: "spec.flux.secretRef.name"
      #   toFieldPath: "spec.references[0].patchesFrom.name"
      # # Grab secretRef.namespace
      # - type: FromCompositeFieldPath
      #   fromFieldPath: "spec.flux.secretRef.namespace"
      #   toFieldPath: "spec.references[0].patchesFrom.namespace"
      # # Grab secretRef.name
      # - type: FromCompositeFieldPath
      #   fromFieldPath: "spec.flux.secretRef.name"
      #   toFieldPath: "spec.references[1].patchesFrom.name"
      # # Grab secretRef.namespace
      # - type: FromCompositeFieldPath
      #   fromFieldPath: "spec.flux.secretRef.namespace"
      #   toFieldPath: "spec.references[1].patchesFrom.namespace"
      # Grab cluster label
      - type: FromCompositeFieldPath
        fromFieldPath: "spec.name"
        toFieldPath: "metadata.labels['cluster-name']"
      # Grab cluster label
      - type: FromCompositeFieldPath
        fromFieldPath: "metadata.labels['crossplane.io/claim-namespace']"
        toFieldPath: "spec.forProvider.manifest.metadata.labels['crossplane.io/claim-namespace']"
      - type: FromCompositeFieldPath
        fromFieldPath: "metadata.labels['crossplane.io/claim-name']"
        toFieldPath: "spec.forProvider.manifest.metadata.labels['crossplane.io/claim-name']"
      - type: FromCompositeFieldPath
        fromFieldPath: "metadata.labels['crossplane.io/composite']"
        toFieldPath: "spec.forProvider.manifest.metadata.labels['crossplane.io/composite']"
